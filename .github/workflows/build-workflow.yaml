name: build-workflow
on: [push]
jobs:
    clang-format:
        name: "Clang-format"
        runs-on: "ubuntu-latest"
        if: false
        steps:
        - uses: actions/checkout@v4
          with:
              fetch-depth: 1
              ref: ${{ github.event.pull_request.head.sha }}
        - run: git fetch origin master --depth=1

        - name: Install clang-format-17 from llvm repositories
          run: |
            echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-17 main" | sudo tee /etc/apt/sources.list.d/llvm-17.list
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo apt update
            sudo apt install clang-format-17
            sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-17 20
            sudo update-alternatives --set clang-format /usr/bin/clang-format-17

        - name: Check with clang-format
          run: |
            git clang-format-17 origin/master --diffstat

    build-linux:
        name: "build-linux (${{ matrix.compiler.CC }} ${{ matrix.compiler.config }})"
        strategy:
            matrix:
                compiler: [
                  { "deps": "gcc-10 g++-10", "CC": "gcc-10", "CXX": "g++-10", "type": "release", config: ""},
                  { "deps": "gcc-11 g++-11", "CC": "gcc-11", "CXX": "g++-11", "type": "release", config: ""},
                  { "deps": "gcc-12 g++-12", "CC": "gcc-12", "CXX": "g++-12", "type": "release", config: ""},
                  { "deps": "clang-11", "CC": "clang-11", "CXX": "clang++-11", "type": "release", config: ""},
                  { "deps": "clang-11", "CC": "clang-11", "CXX": "clang++-11", "type": "release", config: "-Dtracy_enable=true"} ]
        runs-on: "ubuntu-22.04"
        steps:
        - uses: actions/checkout@v2
          with:
              submodules: recursive

        - name: Install dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y ninja-build gcovr lcov libgl1-mesa-dev ${{ matrix.compiler.deps }}

        - name: Build
          run: |
            mkdir -p build/${{ matrix.compiler.CC }}-${{ matrix.compiler.type }}
            cd build/${{ matrix.compiler.CC }}-${{ matrix.compiler.type }}
            CC=${{ matrix.compiler.CC }} CXX=${{ matrix.compiler.CXX }} ../meson/meson.py setup --buildtype=${{ matrix.compiler.type }} --wrap-mode=forcefallback -Db_coverage=true ${{ matrix.compiler.config }} ../..
            ninja

        - name: Tests
          run: |
            ninja -C build/${{ matrix.compiler.CC }}-${{ matrix.compiler.type }} test

    build-macos:
        runs-on: "macOS-latest"
        steps:
        - uses: actions/checkout@v2
          with:
              submodules: recursive

        - name: Install dependencies
          run: |
            brew install python3 ninja

        - name: Build
          run: |
            sudo rm -Rf /Library/Developer/CommandLineTools
            sudo xcode-select -s /Applications/Xcode.app
            mkdir -p build/release
            cd build/release
            python3 ../meson/meson.py setup --buildtype=release --wrap-mode=forcefallback ../..
            ninja

        - name: Tests
          run: |
            ninja -C build/release test

    build-win:
        runs-on: "windows-2019"
        steps:
        - uses: actions/checkout@v2
          name: checkout
          with:
              submodules: recursive

        - name: Build
          shell: pwsh
          run: |
            # download and install prerequisites
            function DownloadFile([String] $Source, [String] $Destination)
            {
                $retries = 2
                for ($i = 1; $i -le $retries; $i++)
                {
                    try
                    {
                        (New-Object net.webclient).DownloadFile($Source, $Destination)
                        break # succeeded
                    }
                    catch [net.WebException]
                    {
                        if ($i -eq $retries)
                        {
                        throw # fail on last retry
                        }

                        $backoff = (10 * $i) # backoff 10s, 20s, 30s...
                        echo ('{0}: {1}' -f $Source, $_.Exception.Message)
                        echo ('Retrying in {0}s...' -f $backoff)
                        Start-Sleep -m ($backoff * 1000)
                    }
                }
            }

            DownloadFile -Source 'https://github.com/mesonbuild/cidata/raw/master/ninja.exe' -Destination "ninja.exe"

            # add downloads to PATH
            $env:Path = "$env:SYSTEM_WORKFOLDER;$env:Path"

            $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"

            $vcvarspath = &$vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
            Write-Output "vc tools located at: $vcvarspath"

            cmd.exe /c "call `"$vcvarspath\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"

            Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
                if ($_ -match "^(.*?)=(.*)$") {
                Set-Content "env:\$($matches[1])" $matches[2]
                }
            }

            $env:PKG_CONFIG_LIBDIR = "."

            md build\win-release
            echo 'Configuring...'
            python build\meson\meson.py setup --buildtype=release --wrap-mode=forcefallback  . build/win-release
            #python build\meson\meson.py compile -C build/win-$(BUILDTYPE)
            echo 'Building...'
            ninja -C build/win-release
            ninja -C build/win-release test

