name: build-workflow
on: [push]
jobs:
    build-linux:
        strategy:
            matrix:
                compiler: [
                    { "deps": "gcc-8 g++-8", "CC": "gcc-8", "CXX": "g++-8", "type": "release" },
                    { "deps": "clang-8", "CC": "clang-8", "CXX": "clang++-8", "type": "release" }
                ]
        runs-on: "ubuntu-20.04"
        steps:
        - uses: actions/checkout@v2
          with:
              submodules: recursive

        - name: Install dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y ninja-build gcovr lcov libgl1-mesa-dev ${{ matrix.compiler.deps }}

        - name: Build
          run: |
            mkdir -p build/${{ matrix.compiler.CC }}-${{ matrix.compiler.type }}
            cd build/${{ matrix.compiler.CC }}-${{ matrix.compiler.type }}
            CC=${{ matrix.compiler.CC }} CXX=${{ matrix.compiler.CXX }} ../meson/meson.py --buildtype=${{ matrix.compiler.type }} --wrap-mode=forcefallback -Db_coverage=true ../..
            ninja

        - name: Tests
          run: |
            cd build/${{ matrix.compiler.CC }}-${{ matrix.compiler.type }}
            ./test/unittest --gtest_output=xml
            ./test/devtest --gtest_output=xml

    build-macos:
        runs-on: "macOS-10.15"
        steps:
        - uses: actions/checkout@v2
          with:
              submodules: recursive

        - name: Install dependencies
          run: |
            brew install python3 ninja

        - name: Build
          run: |
            sudo rm -Rf /Library/Developer/CommandLineTools
            sudo xcode-select -s /Applications/Xcode.app
            mkdir -p build/release
            cd build/release
            python3 ../meson/meson.py --buildtype=release --wrap-mode=forcefallback ../..
            ninja

        - name: Tests
          run: |
            cd build/release
            ./test/unittest --gtest_output=xml
            ./test/devtest --gtest_output=xml

    build-win:
        runs-on: "windows-2019"
        steps:
        - uses: actions/checkout@v2
          with:
              submodules: recursive

        - name: Build
          shell: pwsh
          run: |
            # download and install prerequisites
            function DownloadFile([String] $Source, [String] $Destination)
            {
                $retries = 2
                for ($i = 1; $i -le $retries; $i++)
                {
                    try
                    {
                        (New-Object net.webclient).DownloadFile($Source, $Destination)
                        break # succeeded
                    }
                    catch [net.WebException]
                    {
                        if ($i -eq $retries)
                        {
                        throw # fail on last retry
                        }

                        $backoff = (10 * $i) # backoff 10s, 20s, 30s...
                        echo ('{0}: {1}' -f $Source, $_.Exception.Message)
                        echo ('Retrying in {0}s...' -f $backoff)
                        Start-Sleep -m ($backoff * 1000)
                    }
                }
            }

            DownloadFile -Source 'https://github.com/mesonbuild/cidata/raw/master/ninja.exe' -Destination "ninja.exe"

            # add downloads to PATH
            $env:Path = "$env:SYSTEM_WORKFOLDER;$env:Path"

            $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"

            $vcvarspath = &$vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
            Write-Output "vc tools located at: $vcvarspath"

            cmd.exe /c "call `"$vcvarspath\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"

            Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
                if ($_ -match "^(.*?)=(.*)$") {
                Set-Content "env:\$($matches[1])" $matches[2]
                }
            }

            $env:PKG_CONFIG_LIBDIR = "."

            md build\win-release
            echo 'Configuring...'
            python build\meson\meson.py --buildtype=release --wrap-mode=forcefallback  . build/win-release
            #python build\meson\meson.py compile -C build/win-$(BUILDTYPE)
            echo 'Building...'
            ninja -C build/win-release
            ninja -C build/win-release test

