# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
  autoCancel: false
  branches:
    include:
      - "*"

jobs:
- job: build
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      gcc8:
        DEPS: 'gcc-8 g++-8'
        CC: 'gcc-8'
        CXX: 'g++-8'
        BUILDTYPE: 'release'
      clang6:
        CC: 'clang-6.0'
        CXX: 'clang++-6.0'
        BUILDTYPE: 'release'

  steps:
  - checkout: self
    submodules: true

  - script: |
      sudo apt-get update
      sudo apt-get install -y ninja-build gcovr lcov libgl1-mesa-dev $(DEPS)
    displayName: 'install dependencies'

  - script: |
      mkdir -p build/$(CC)-$(BUILDTYPE)
      cd build/$(CC)-$(BUILDTYPE)
      CC=$(CC) CXX=$(CXX) ../meson/meson.py --buildtype=$(BUILDTYPE) --wrap-mode=forcefallback -Db_coverage=true ../..
      ninja
    displayName: 'Build'
    timeoutInMinutes: 20

  - script: |
      cd build/$(CC)-$(BUILDTYPE)
      ./test/unittest --gtest_output=xml
    displayName: 'Run unit tests'
    timeoutInMinutes: 20

  - script: |
      cd $(Build.SourcesDirectory)/build/$(CC)-$(BUILDTYPE)
      ninja coverage-xml
    enabled: false

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: build/**/test_detail.xml
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    inputs:
      summaryFileLocation: $(Build.SourcesDirectory)/build/$(CC)-$(BUILDTYPE)/meson-logs/coverage.xml
    enabled: false

